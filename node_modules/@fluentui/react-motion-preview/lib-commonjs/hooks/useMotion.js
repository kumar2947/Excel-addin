"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getDefaultMotionState: function() {
        return getDefaultMotionState;
    },
    useMotion: function() {
        return useMotion;
    },
    useIsMotion: function() {
        return useIsMotion;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactutilities = require("@fluentui/react-utilities");
const _useReducedMotion = require("./useReducedMotion");
const _domstyle = require("../utils/dom-style");
/**
 * @internal
 *
 * Checks if components was mounted after first render and a certain condition is met.
 *
 * @param condition - Condition to check
 */ const useFirstMountCondition = (condition)=>{
    const isFirst = _react.useRef(true);
    if (isFirst.current && condition) {
        isFirst.current = false;
        return true;
    }
    return isFirst.current;
};
/**
 * @internal
 *
 * Hook to manage the presence of an element in the DOM based on its CSS transition/animation state.
 *
 * @param present - Whether the element should be present in the DOM
 * @param events - Callbacks for when the element enters or exits the DOM
 */ function useMotionPresence(presence, options = {}) {
    const { animateOnFirstMount } = {
        animateOnFirstMount: false,
        ...options
    };
    const [type, setType] = _react.useState(presence && animateOnFirstMount ? 'entering' : presence ? 'idle' : 'unmounted');
    const [active, setActive] = _react.useState(!animateOnFirstMount && presence);
    const [setAnimationTimeout, clearAnimationTimeout] = (0, _reactutilities.useTimeout)();
    const [setAnimationFrame, cancelAnimationFrame] = (0, _reactutilities.useAnimationFrame)();
    const [currentElement, setCurrentElement] = _react.useState(null);
    const isReducedMotion = (0, _useReducedMotion.useReducedMotion)();
    const isFirstReactRender = (0, _reactutilities.useFirstMount)();
    const isFirstDOMRender = useFirstMountCondition(!!currentElement);
    const isInitiallyPresent = _react.useRef(presence).current;
    const disableAnimation = isReducedMotion || isFirstDOMRender && isInitiallyPresent && !animateOnFirstMount;
    const ref = _react.useCallback((node)=>{
        if (!node) {
            return;
        }
        setCurrentElement(node);
    }, []);
    const onFinished = _react.useCallback(()=>{
        setType(presence ? 'entered' : 'exited');
        setAnimationFrame(()=>setType(presence ? 'idle' : 'unmounted'));
    }, [
        presence,
        setAnimationFrame
    ]);
    _react.useEffect(()=>{
        if (isFirstReactRender) {
            return;
        }
        /*
     * In case animation is disabled, we can skip the animation and go straight to the idle state.
     */ if (disableAnimation) {
            setType(presence ? 'idle' : 'unmounted');
            setActive(presence);
            return;
        }
        setType(presence ? 'entering' : 'exiting');
        /*
     * If the element is not rendered, nothing to do.
     */ if (!currentElement) {
            return;
        }
        /*
     * Wait for the next frame to ensure the element is rendered and the animation can start.
     */ setAnimationFrame(()=>{
            setActive(presence);
            /*
       * Wait for the next frame to ensure the animation has started.
       */ setAnimationFrame(()=>{
                const duration = (0, _domstyle.getMotionDuration)(currentElement);
                if (duration === 0) {
                    onFinished();
                    return;
                }
                /**
         * Wait for the animation to finish before updating the state.
         * This is an alternative to using the `transitionend` event which can be unreliable as it fires multiple times
         * if the transition has multiple properties.
         */ setAnimationTimeout(()=>onFinished(), duration);
            });
        });
        return ()=>{
            cancelAnimationFrame();
            clearAnimationTimeout();
        };
    /*
     * Only tracks dependencies that are either not stable or are used in the callbacks
     * This is to avoid re-running the effect on every render, especially when the element is not rendered
     */ // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        currentElement,
        disableAnimation,
        onFinished,
        presence
    ]);
    return _react.useMemo(()=>({
            ref,
            type,
            active,
            canRender: presence || type !== 'unmounted'
        }), // eslint-disable-next-line react-hooks/exhaustive-deps
    [
        active,
        type,
        presence
    ]);
}
function getDefaultMotionState() {
    return {
        ref: /*#__PURE__*/ _react.createRef(),
        type: 'unmounted',
        active: false,
        canRender: false
    };
}
function useMotion(shorthand, options) {
    /**
   * Heads up!
   * This hook returns a Motion but also accepts Motion as an argument.
   * In case the hook is called with a Motion as argument, we don't need to perform the expensive computation of the
   * motion state and can just return the motion value as is. This is intentional as it allows others to use the hook
   * on their side without having to worry about the performance impact of the hook.
   */ // eslint-disable-next-line react-hooks/rules-of-hooks
    return useIsMotion(shorthand) ? shorthand : useMotionPresence(shorthand, options);
}
const stringifyShorthand = (value)=>{
    return JSON.stringify(value, null, 2);
};
function useIsMotion(shorthand) {
    const previousShorthand = (0, _reactutilities.usePrevious)(shorthand);
    /**
   * Heads up!
   * We don't want these warnings in production even though it is against native behavior
   */ if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        _react.useEffect(()=>{
            if (previousShorthand !== null && typeof previousShorthand !== typeof shorthand) {
                // eslint-disable-next-line no-console
                console.error([
                    'useMotion: The hook needs to be called with the same typeof of shorthand on every render.',
                    'This is to ensure the internal state of the hook is stable and can be used to accurately detect the motion state.',
                    'Please make sure to not change the shorthand on subsequent renders or to use the hook conditionally.',
                    '\nCurrent shorthand:',
                    stringifyShorthand(shorthand),
                    '\nPrevious shorthand:',
                    stringifyShorthand(previousShorthand)
                ].join(' '));
            }
        }, [
            shorthand,
            previousShorthand
        ]);
    }
    return typeof shorthand === 'object';
}
