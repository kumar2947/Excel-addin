{"version":3,"sources":["useMotion.ts"],"sourcesContent":["import * as React from 'react';\nimport { useAnimationFrame, useTimeout, usePrevious, useFirstMount } from '@fluentui/react-utilities';\n\nimport { useReducedMotion } from './useReducedMotion';\nimport { getMotionDuration } from '../utils/dom-style';\nimport type { HTMLElementWithStyledMap } from '../utils/dom-style';\n\nexport type MotionOptions = {\n  /**\n   * Whether to animate the element on first mount.\n   *\n   * @default false\n   */\n  animateOnFirstMount?: boolean;\n};\n\nexport type MotionType = 'entering' | 'entered' | 'idle' | 'exiting' | 'exited' | 'unmounted';\n\nexport type MotionState<Element extends HTMLElement = HTMLElement> = {\n  /**\n   * Ref to the element.\n   */\n  ref: React.Ref<Element>;\n\n  /**\n   * Current state of the element.\n   *\n   * - `unmounted` - The element is not yet rendered or can be safely removed from the DOM.\n   * - `entering` - The element is performing enter animation.\n   * - `entered` - The element has finished enter animation.\n   * - `idle` - The element is currently not animating, but rendered on screen.\n   * - `exiting` - The element is performing exit animation.\n   * - `exited` - The element has finished exit animation.\n   */\n  type: MotionType;\n\n  /**\n   * Indicates whether the component can be rendered.\n   * Useful to render the element before animating it or to remove it from the DOM after exit animation.\n   */\n  canRender: boolean;\n\n  /**\n   * Indicates whether the component is ready to receive a CSS transition className.\n   * Useful to apply CSS transitions when the element is mounted and ready to be animated.\n   */\n  active: boolean;\n};\n\nexport type MotionShorthandValue = boolean;\n\nexport type MotionShorthand<Element extends HTMLElement = HTMLElement> = MotionShorthandValue | MotionState<Element>;\n\n/**\n * @internal\n *\n * Checks if components was mounted after first render and a certain condition is met.\n *\n * @param condition - Condition to check\n */\nconst useFirstMountCondition = (condition: boolean): boolean => {\n  const isFirst = React.useRef(true);\n\n  if (isFirst.current && condition) {\n    isFirst.current = false;\n    return true;\n  }\n\n  return isFirst.current;\n};\n\n/**\n * @internal\n *\n * Hook to manage the presence of an element in the DOM based on its CSS transition/animation state.\n *\n * @param present - Whether the element should be present in the DOM\n * @param events - Callbacks for when the element enters or exits the DOM\n */\nfunction useMotionPresence<Element extends HTMLElement>(\n  presence: boolean,\n  options: MotionOptions = {},\n): MotionState<Element> {\n  const { animateOnFirstMount } = { animateOnFirstMount: false, ...options };\n\n  const [type, setType] = React.useState<MotionType>(\n    presence && animateOnFirstMount ? 'entering' : presence ? 'idle' : 'unmounted',\n  );\n  const [active, setActive] = React.useState<boolean>(!animateOnFirstMount && presence);\n\n  const [setAnimationTimeout, clearAnimationTimeout] = useTimeout();\n  const [setAnimationFrame, cancelAnimationFrame] = useAnimationFrame();\n\n  const [currentElement, setCurrentElement] = React.useState<HTMLElementWithStyledMap<Element> | null>(null);\n\n  const isReducedMotion = useReducedMotion();\n  const isFirstReactRender = useFirstMount();\n  const isFirstDOMRender = useFirstMountCondition(!!currentElement);\n  const isInitiallyPresent = React.useRef<boolean>(presence).current;\n  const disableAnimation = isReducedMotion || (isFirstDOMRender && isInitiallyPresent && !animateOnFirstMount);\n\n  const ref: React.RefCallback<HTMLElementWithStyledMap<Element>> = React.useCallback(node => {\n    if (!node) {\n      return;\n    }\n\n    setCurrentElement(node);\n  }, []);\n\n  const onFinished = React.useCallback(() => {\n    setType(presence ? 'entered' : 'exited');\n    setAnimationFrame(() => setType(presence ? 'idle' : 'unmounted'));\n  }, [presence, setAnimationFrame]);\n\n  React.useEffect(() => {\n    if (isFirstReactRender) {\n      return;\n    }\n\n    /*\n     * In case animation is disabled, we can skip the animation and go straight to the idle state.\n     */\n    if (disableAnimation) {\n      setType(presence ? 'idle' : 'unmounted');\n      setActive(presence);\n      return;\n    }\n\n    setType(presence ? 'entering' : 'exiting');\n\n    /*\n     * If the element is not rendered, nothing to do.\n     */\n    if (!currentElement) {\n      return;\n    }\n\n    /*\n     * Wait for the next frame to ensure the element is rendered and the animation can start.\n     */\n    setAnimationFrame(() => {\n      setActive(presence);\n\n      /*\n       * Wait for the next frame to ensure the animation has started.\n       */\n      setAnimationFrame(() => {\n        const duration = getMotionDuration(currentElement);\n\n        if (duration === 0) {\n          onFinished();\n          return;\n        }\n\n        /**\n         * Wait for the animation to finish before updating the state.\n         * This is an alternative to using the `transitionend` event which can be unreliable as it fires multiple times\n         * if the transition has multiple properties.\n         */\n        setAnimationTimeout(() => onFinished(), duration);\n      });\n    });\n\n    return () => {\n      cancelAnimationFrame();\n      clearAnimationTimeout();\n    };\n    /*\n     * Only tracks dependencies that are either not stable or are used in the callbacks\n     * This is to avoid re-running the effect on every render, especially when the element is not rendered\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElement, disableAnimation, onFinished, presence]);\n\n  return React.useMemo<MotionState<Element>>(\n    () => ({\n      ref,\n      type,\n      active,\n      canRender: presence || type !== 'unmounted',\n    }),\n    // No need to add ref to the deps array as it is stable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [active, type, presence],\n  );\n}\n\n/**\n * Returns a default motion state.\n */\nexport function getDefaultMotionState<Element extends HTMLElement>(): MotionState<Element> {\n  return {\n    ref: React.createRef<Element>(),\n    type: 'unmounted',\n    active: false,\n    canRender: false,\n  };\n}\n\n/**\n * Hook to manage the presence of an element in the DOM based on its CSS transition/animation state.\n *\n * @param props - Motion props to manage the presence of an element in the DOM\n * @param options - Motion options to configure the hook\n */\nexport function useMotion<Element extends HTMLElement>(\n  shorthand: MotionShorthand<Element>,\n  options?: MotionOptions,\n): MotionState<Element> {\n  /**\n   * Heads up!\n   * This hook returns a Motion but also accepts Motion as an argument.\n   * In case the hook is called with a Motion as argument, we don't need to perform the expensive computation of the\n   * motion state and can just return the motion value as is. This is intentional as it allows others to use the hook\n   * on their side without having to worry about the performance impact of the hook.\n   */\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useIsMotion(shorthand) ? shorthand : useMotionPresence(shorthand, options);\n}\n\nconst stringifyShorthand = <Element extends HTMLElement>(value: MotionShorthand<Element>) => {\n  return JSON.stringify(value, null, 2);\n};\n\n/**\n * @internal\n *\n * This method emits a warning if the hook is called with\n * a different typeof of shorthand on subsequent renders,\n * since this can lead breaking the rules of hooks.\n *\n * It also return a boolean indicating whether the shorthand is a motion object.\n */\nexport function useIsMotion<Element extends HTMLElement>(\n  shorthand: MotionShorthand<Element>,\n): shorthand is MotionState<Element> {\n  const previousShorthand = usePrevious(shorthand);\n\n  /**\n   * Heads up!\n   * We don't want these warnings in production even though it is against native behavior\n   */\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (previousShorthand !== null && typeof previousShorthand !== typeof shorthand) {\n        // eslint-disable-next-line no-console\n        console.error(\n          [\n            'useMotion: The hook needs to be called with the same typeof of shorthand on every render.',\n            'This is to ensure the internal state of the hook is stable and can be used to accurately detect the motion state.',\n            'Please make sure to not change the shorthand on subsequent renders or to use the hook conditionally.',\n            '\\nCurrent shorthand:',\n            stringifyShorthand(shorthand),\n            '\\nPrevious shorthand:',\n            stringifyShorthand(previousShorthand),\n          ].join(' '),\n        );\n      }\n    }, [shorthand, previousShorthand]);\n  }\n  return typeof shorthand === 'object';\n}\n"],"names":["React","useAnimationFrame","useTimeout","usePrevious","useFirstMount","useReducedMotion","getMotionDuration","useFirstMountCondition","condition","isFirst","useRef","current","useMotionPresence","presence","options","animateOnFirstMount","type","setType","useState","active","setActive","setAnimationTimeout","clearAnimationTimeout","setAnimationFrame","cancelAnimationFrame","currentElement","setCurrentElement","isReducedMotion","isFirstReactRender","isFirstDOMRender","isInitiallyPresent","disableAnimation","ref","useCallback","node","onFinished","useEffect","duration","useMemo","canRender","getDefaultMotionState","createRef","useMotion","shorthand","useIsMotion","stringifyShorthand","value","JSON","stringify","previousShorthand","process","env","NODE_ENV","console","error","join"],"mappings":"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"}