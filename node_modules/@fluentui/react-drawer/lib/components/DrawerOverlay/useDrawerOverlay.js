import * as React from 'react';
import { slot, useMergedRefs } from '@fluentui/react-utilities';
import { Dialog } from '@fluentui/react-dialog';
import { useMotion } from '@fluentui/react-motion-preview';
import { useDrawerDefaultProps } from '../../shared/useDrawerDefaultProps';
import { DrawerOverlaySurface } from './DrawerOverlaySurface';
/**
 * Create the state required to render DrawerOverlay.
 *
 * The returned state can be modified with hooks such as useDrawerOverlayStyles_unstable,
 * before being passed to renderDrawerOverlay_unstable.
 *
 * @param props - props from this instance of DrawerOverlay
 * @param ref - reference to root HTMLDivElement of DrawerOverlay
 */ export const useDrawerOverlay_unstable = (props, ref)=>{
    const { open, size, position } = useDrawerDefaultProps(props);
    const { modalType = 'modal', inertTrapFocus, defaultOpen = false, onOpenChange } = props;
    const drawerMotion = useMotion(open);
    const backdropMotion = useMotion(open);
    const backdropInnerProps = slot.resolveShorthand(props.backdrop);
    const hasCustomBackdrop = modalType !== 'non-modal' && backdropInnerProps !== null;
    const backdropProps = {
        ...backdropInnerProps,
        ref: useMergedRefs(backdropMotion.ref, backdropInnerProps === null || backdropInnerProps === void 0 ? void 0 : backdropInnerProps.ref)
    };
    const root = slot.always({
        ...props,
        backdrop: hasCustomBackdrop ? backdropProps : null
    }, {
        elementType: DrawerOverlaySurface,
        defaultProps: {
            ref: useMergedRefs(ref, drawerMotion.ref)
        }
    });
    const dialog = slot.always({
        open: true,
        defaultOpen,
        onOpenChange,
        inertTrapFocus,
        modalType,
        /*
       * children is not needed here because we construct the children in the render function,
       * but it's required by DialogProps
       */ children: null
    }, {
        elementType: Dialog
    });
    return {
        components: {
            root: DrawerOverlaySurface,
            dialog: Dialog
        },
        root,
        dialog,
        size,
        position,
        motion: drawerMotion,
        backdropMotion
    };
};
