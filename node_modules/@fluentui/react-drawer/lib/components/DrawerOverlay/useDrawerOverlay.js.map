{"version":3,"sources":["useDrawerOverlay.ts"],"sourcesContent":["import * as React from 'react';\nimport { slot, useMergedRefs } from '@fluentui/react-utilities';\nimport { Dialog } from '@fluentui/react-dialog';\nimport { useMotion } from '@fluentui/react-motion-preview';\n\nimport { useDrawerDefaultProps } from '../../shared/useDrawerDefaultProps';\nimport type { DrawerOverlayProps, DrawerOverlayState } from './DrawerOverlay.types';\nimport { DrawerOverlaySurface } from './DrawerOverlaySurface';\n\n/**\n * Create the state required to render DrawerOverlay.\n *\n * The returned state can be modified with hooks such as useDrawerOverlayStyles_unstable,\n * before being passed to renderDrawerOverlay_unstable.\n *\n * @param props - props from this instance of DrawerOverlay\n * @param ref - reference to root HTMLDivElement of DrawerOverlay\n */\nexport const useDrawerOverlay_unstable = (\n  props: DrawerOverlayProps,\n  ref: React.Ref<HTMLDivElement>,\n): DrawerOverlayState => {\n  const { open, size, position } = useDrawerDefaultProps(props);\n  const { modalType = 'modal', inertTrapFocus, defaultOpen = false, onOpenChange } = props;\n\n  const drawerMotion = useMotion<HTMLDivElement>(open);\n  const backdropMotion = useMotion<HTMLDivElement>(open);\n\n  const backdropInnerProps = slot.resolveShorthand(props.backdrop);\n  const hasCustomBackdrop = modalType !== 'non-modal' && backdropInnerProps !== null;\n\n  const backdropProps = {\n    ...backdropInnerProps,\n    ref: useMergedRefs(backdropMotion.ref, backdropInnerProps?.ref),\n  };\n  const root = slot.always(\n    {\n      ...props,\n      backdrop: hasCustomBackdrop ? backdropProps : null,\n    },\n    {\n      elementType: DrawerOverlaySurface,\n      defaultProps: {\n        ref: useMergedRefs(ref, drawerMotion.ref),\n      },\n    },\n  );\n\n  const dialog = slot.always(\n    {\n      open: true,\n      defaultOpen,\n      onOpenChange,\n      inertTrapFocus,\n      modalType,\n      /*\n       * children is not needed here because we construct the children in the render function,\n       * but it's required by DialogProps\n       */\n      children: null as unknown as JSX.Element,\n    },\n    {\n      elementType: Dialog,\n    },\n  );\n\n  return {\n    components: {\n      root: DrawerOverlaySurface,\n      dialog: Dialog,\n    },\n\n    root,\n    dialog,\n\n    size,\n    position,\n    motion: drawerMotion,\n    backdropMotion,\n  };\n};\n"],"names":["React","slot","useMergedRefs","Dialog","useMotion","useDrawerDefaultProps","DrawerOverlaySurface","useDrawerOverlay_unstable","props","ref","open","size","position","modalType","inertTrapFocus","defaultOpen","onOpenChange","drawerMotion","backdropMotion","backdropInnerProps","resolveShorthand","backdrop","hasCustomBackdrop","backdropProps","root","always","elementType","defaultProps","dialog","children","components","motion"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,IAAI,EAAEC,aAAa,QAAQ,4BAA4B;AAChE,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,SAAS,QAAQ,iCAAiC;AAE3D,SAASC,qBAAqB,QAAQ,qCAAqC;AAE3E,SAASC,oBAAoB,QAAQ,yBAAyB;AAE9D;;;;;;;;CAQC,GACD,OAAO,MAAMC,4BAA4B,CACvCC,OACAC;IAEA,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAGP,sBAAsBG;IACvD,MAAM,EAAEK,YAAY,OAAO,EAAEC,cAAc,EAAEC,cAAc,KAAK,EAAEC,YAAY,EAAE,GAAGR;IAEnF,MAAMS,eAAeb,UAA0BM;IAC/C,MAAMQ,iBAAiBd,UAA0BM;IAEjD,MAAMS,qBAAqBlB,KAAKmB,gBAAgB,CAACZ,MAAMa,QAAQ;IAC/D,MAAMC,oBAAoBT,cAAc,eAAeM,uBAAuB;IAE9E,MAAMI,gBAAgB;QACpB,GAAGJ,kBAAkB;QACrBV,KAAKP,cAAcgB,eAAeT,GAAG,EAAEU,+BAAAA,yCAAAA,mBAAoBV,GAAG;IAChE;IACA,MAAMe,OAAOvB,KAAKwB,MAAM,CACtB;QACE,GAAGjB,KAAK;QACRa,UAAUC,oBAAoBC,gBAAgB;IAChD,GACA;QACEG,aAAapB;QACbqB,cAAc;YACZlB,KAAKP,cAAcO,KAAKQ,aAAaR,GAAG;QAC1C;IACF;IAGF,MAAMmB,SAAS3B,KAAKwB,MAAM,CACxB;QACEf,MAAM;QACNK;QACAC;QACAF;QACAD;QACA;;;OAGC,GACDgB,UAAU;IACZ,GACA;QACEH,aAAavB;IACf;IAGF,OAAO;QACL2B,YAAY;YACVN,MAAMlB;YACNsB,QAAQzB;QACV;QAEAqB;QACAI;QAEAjB;QACAC;QACAmB,QAAQd;QACRC;IACF;AACF,EAAE"}