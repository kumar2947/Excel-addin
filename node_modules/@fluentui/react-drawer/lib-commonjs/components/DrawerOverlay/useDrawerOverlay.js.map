{"version":3,"sources":["useDrawerOverlay.js"],"sourcesContent":["import * as React from 'react';\nimport { slot, useMergedRefs } from '@fluentui/react-utilities';\nimport { Dialog } from '@fluentui/react-dialog';\nimport { useMotion } from '@fluentui/react-motion-preview';\nimport { useDrawerDefaultProps } from '../../shared/useDrawerDefaultProps';\nimport { DrawerOverlaySurface } from './DrawerOverlaySurface';\n/**\n * Create the state required to render DrawerOverlay.\n *\n * The returned state can be modified with hooks such as useDrawerOverlayStyles_unstable,\n * before being passed to renderDrawerOverlay_unstable.\n *\n * @param props - props from this instance of DrawerOverlay\n * @param ref - reference to root HTMLDivElement of DrawerOverlay\n */ export const useDrawerOverlay_unstable = (props, ref)=>{\n    const { open, size, position } = useDrawerDefaultProps(props);\n    const { modalType = 'modal', inertTrapFocus, defaultOpen = false, onOpenChange } = props;\n    const drawerMotion = useMotion(open);\n    const backdropMotion = useMotion(open);\n    const backdropInnerProps = slot.resolveShorthand(props.backdrop);\n    const hasCustomBackdrop = modalType !== 'non-modal' && backdropInnerProps !== null;\n    const backdropProps = {\n        ...backdropInnerProps,\n        ref: useMergedRefs(backdropMotion.ref, backdropInnerProps === null || backdropInnerProps === void 0 ? void 0 : backdropInnerProps.ref)\n    };\n    const root = slot.always({\n        ...props,\n        backdrop: hasCustomBackdrop ? backdropProps : null\n    }, {\n        elementType: DrawerOverlaySurface,\n        defaultProps: {\n            ref: useMergedRefs(ref, drawerMotion.ref)\n        }\n    });\n    const dialog = slot.always({\n        open: true,\n        defaultOpen,\n        onOpenChange,\n        inertTrapFocus,\n        modalType,\n        /*\n       * children is not needed here because we construct the children in the render function,\n       * but it's required by DialogProps\n       */ children: null\n    }, {\n        elementType: Dialog\n    });\n    return {\n        components: {\n            root: DrawerOverlaySurface,\n            dialog: Dialog\n        },\n        root,\n        dialog,\n        size,\n        position,\n        motion: drawerMotion,\n        backdropMotion\n    };\n};\n"],"names":["useDrawerOverlay_unstable","props","ref","open","size","position","useDrawerDefaultProps","modalType","inertTrapFocus","defaultOpen","onOpenChange","drawerMotion","useMotion","backdropMotion","backdropInnerProps","slot","resolveShorthand","backdrop","hasCustomBackdrop","backdropProps","useMergedRefs","root","always","elementType","DrawerOverlaySurface","defaultProps","dialog","children","Dialog","components","motion"],"mappings":";;;;+BAciBA;;;eAAAA;;;;iEAdM;gCACa;6BACb;oCACG;uCACY;sCACD;AAS1B,MAAMA,4BAA4B,CAACC,OAAOC;IACjD,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,4CAAqB,EAACL;IACvD,MAAM,EAAEM,YAAY,OAAO,EAAEC,cAAc,EAAEC,cAAc,KAAK,EAAEC,YAAY,EAAE,GAAGT;IACnF,MAAMU,eAAeC,IAAAA,6BAAS,EAACT;IAC/B,MAAMU,iBAAiBD,IAAAA,6BAAS,EAACT;IACjC,MAAMW,qBAAqBC,oBAAI,CAACC,gBAAgB,CAACf,MAAMgB,QAAQ;IAC/D,MAAMC,oBAAoBX,cAAc,eAAeO,uBAAuB;IAC9E,MAAMK,gBAAgB;QAClB,GAAGL,kBAAkB;QACrBZ,KAAKkB,IAAAA,6BAAa,EAACP,eAAeX,GAAG,EAAEY,uBAAuB,QAAQA,uBAAuB,KAAK,IAAI,KAAK,IAAIA,mBAAmBZ,GAAG;IACzI;IACA,MAAMmB,OAAON,oBAAI,CAACO,MAAM,CAAC;QACrB,GAAGrB,KAAK;QACRgB,UAAUC,oBAAoBC,gBAAgB;IAClD,GAAG;QACCI,aAAaC,0CAAoB;QACjCC,cAAc;YACVvB,KAAKkB,IAAAA,6BAAa,EAAClB,KAAKS,aAAaT,GAAG;QAC5C;IACJ;IACA,MAAMwB,SAASX,oBAAI,CAACO,MAAM,CAAC;QACvBnB,MAAM;QACNM;QACAC;QACAF;QACAD;QACA;;;OAGD,GAAGoB,UAAU;IAChB,GAAG;QACCJ,aAAaK,mBAAM;IACvB;IACA,OAAO;QACHC,YAAY;YACRR,MAAMG,0CAAoB;YAC1BE,QAAQE,mBAAM;QAClB;QACAP;QACAK;QACAtB;QACAC;QACAyB,QAAQnB;QACRE;IACJ;AACJ"}