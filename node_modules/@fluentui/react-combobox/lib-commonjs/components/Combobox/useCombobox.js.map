{"version":3,"sources":["useCombobox.js"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { ArrowLeft, ArrowRight } from '@fluentui/keyboard-keys';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, useEventCallback, useId, useMergedRefs, slot } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\n/**\n * Create the state required to render Combobox.\n *\n * The returned state can be modified with hooks such as useComboboxStyles_unstable,\n * before being passed to renderCombobox_unstable.\n *\n * @param props - props from this instance of Combobox\n * @param ref - reference to root HTMLElement of Combobox\n */ export const useCombobox_unstable = (props, ref)=>{\n    var _props_input;\n    // Merge props from surrounding <Field>, if any\n    props = useFieldControlProps_unstable(props, {\n        supportsLabelFor: true,\n        supportsRequired: true,\n        supportsSize: true\n    });\n    const baseState = useComboboxBaseState({\n        ...props,\n        editable: true\n    });\n    const { activeOption, clearSelection, getIndexOfId, getOptionsMatchingText, hasFocus, open, selectOption, selectedOptions, setActiveOption, setFocusVisible, setOpen, setValue, value } = baseState;\n    const { disabled, freeform, inlinePopup, multiselect } = props;\n    const comboId = useId('combobox-');\n    const { primary: triggerNativeProps, root: rootNativeProps } = getPartitionedNativeProps({\n        props,\n        primarySlotTagName: 'input',\n        excludedPropNames: [\n            'children',\n            'size'\n        ]\n    });\n    const rootRef = React.useRef(null);\n    const triggerRef = React.useRef(null);\n    // NVDA and JAWS have bugs that suppress reading the input value text when aria-activedescendant is set\n    // To prevent this, we clear the HTML attribute (but save the state) when a user presses left/right arrows\n    // ref: https://github.com/microsoft/fluentui/issues/26359#issuecomment-1397759888\n    const [hideActiveDescendant, setHideActiveDescendant] = React.useState(false);\n    // save the typing vs. navigating options state, as the space key should behave differently in each case\n    // we do not want to update the combobox when this changes, just save the value between renders\n    const isTyping = React.useRef(false);\n    // calculate listbox width style based on trigger width\n    const [popupDimensions, setPopupDimensions] = React.useState();\n    React.useEffect(()=>{\n        // only recalculate width when opening\n        if (open) {\n            var _rootRef_current;\n            const width = `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px`;\n            if (width !== (popupDimensions === null || popupDimensions === void 0 ? void 0 : popupDimensions.width)) {\n                setPopupDimensions({\n                    width\n                });\n            }\n        }\n    }, [\n        open,\n        popupDimensions\n    ]);\n    // set active option and selection based on typing\n    const getOptionFromInput = (inputValue)=>{\n        const searchString = inputValue === null || inputValue === void 0 ? void 0 : inputValue.trim().toLowerCase();\n        if (!searchString || searchString.length === 0) {\n            return;\n        }\n        const matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString) === 0;\n        const matches = getOptionsMatchingText(matcher);\n        // return first matching option after the current active option, looping back to the top\n        if (matches.length > 1 && activeOption) {\n            const startIndex = getIndexOfId(activeOption.id);\n            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);\n            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n        }\n        var _matches_;\n        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n    };\n    /* Handle typed input */ // reset any typed value when an option is selected\n    baseState.selectOption = (ev, option)=>{\n        setValue(undefined);\n        selectOption(ev, option);\n    };\n    const onTriggerBlur = (ev)=>{\n        // handle selection and updating value if freeform is false\n        if (!baseState.open && !freeform) {\n            // select matching option, if the value fully matches\n            if (value && activeOption && value.trim().toLowerCase() === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.text.toLowerCase())) {\n                baseState.selectOption(ev, activeOption);\n            }\n            // reset typed value when the input loses focus while collapsed, unless freeform is true\n            setValue(undefined);\n        }\n    };\n    baseState.setOpen = (ev, newState)=>{\n        if (disabled) {\n            return;\n        }\n        if (!newState && !freeform) {\n            setValue(undefined);\n        }\n        setOpen(ev, newState);\n    };\n    // update value and active option based on input\n    const onTriggerChange = (ev)=>{\n        const inputValue = ev.target.value;\n        // update uncontrolled value\n        baseState.setValue(inputValue);\n        // handle updating active option based on input\n        const matchingOption = getOptionFromInput(inputValue);\n        setActiveOption(matchingOption);\n        setFocusVisible(true);\n        // clear selection for single-select if the input value no longer matches the selection\n        if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {\n            clearSelection(ev);\n        }\n    };\n    // resolve input and listbox slot props\n    let triggerSlot;\n    let listboxSlot;\n    triggerSlot = slot.always(props.input, {\n        defaultProps: {\n            ref: useMergedRefs((_props_input = props.input) === null || _props_input === void 0 ? void 0 : _props_input.ref, triggerRef),\n            type: 'text',\n            value: value !== null && value !== void 0 ? value : '',\n            ...triggerNativeProps\n        },\n        elementType: 'input'\n    });\n    const resolvedPropsOnKeyDown = triggerSlot.onKeyDown;\n    triggerSlot.onChange = mergeCallbacks(triggerSlot.onChange, onTriggerChange);\n    triggerSlot.onBlur = mergeCallbacks(triggerSlot.onBlur, onTriggerBlur); // only resolve listbox slot if needed\n    listboxSlot = open || hasFocus ? slot.optional(props.listbox, {\n        renderByDefault: true,\n        defaultProps: {\n            children: props.children,\n            style: popupDimensions\n        },\n        elementType: Listbox\n    }) : undefined;\n    [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n    [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n    if (hideActiveDescendant) {\n        triggerSlot['aria-activedescendant'] = undefined;\n    }\n    const state = {\n        components: {\n            root: 'div',\n            input: 'input',\n            expandIcon: 'span',\n            listbox: Listbox\n        },\n        root: slot.always(props.root, {\n            defaultProps: {\n                'aria-owns': !inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n                ...rootNativeProps\n            },\n            elementType: 'div'\n        }),\n        input: triggerSlot,\n        listbox: listboxSlot,\n        expandIcon: slot.optional(props.expandIcon, {\n            renderByDefault: true,\n            defaultProps: {\n                'aria-expanded': open,\n                children: /*#__PURE__*/ React.createElement(ChevronDownIcon, null),\n                role: 'button'\n            },\n            elementType: 'span'\n        }),\n        ...baseState\n    };\n    state.root.ref = useMergedRefs(state.root.ref, rootRef);\n    /* Set input.onKeyDown here, so we can override the default behavior for spacebar */ const defaultOnTriggerKeyDown = state.input.onKeyDown;\n    state.input.onKeyDown = useEventCallback((ev)=>{\n        if (!open && getDropdownActionFromKey(ev) === 'Type') {\n            baseState.setOpen(ev, true);\n        }\n        // clear activedescendant when moving the text insertion cursor\n        if (ev.key === ArrowLeft || ev.key === ArrowRight) {\n            setHideActiveDescendant(true);\n        } else {\n            setHideActiveDescendant(false);\n        }\n        // update typing state to true if the user is typing\n        const action = getDropdownActionFromKey(ev, {\n            open,\n            multiselect\n        });\n        if (action === 'Type') {\n            isTyping.current = true;\n        } else if (action === 'Open' && ev.key !== ' ' || action === 'Next' || action === 'Previous' || action === 'First' || action === 'Last' || action === 'PageUp' || action === 'PageDown') {\n            isTyping.current = false;\n        }\n        // allow space to insert a character if freeform & the last action was typing, or if the popup is closed\n        if (freeform && (isTyping.current || !open) && ev.key === ' ') {\n            resolvedPropsOnKeyDown === null || resolvedPropsOnKeyDown === void 0 ? void 0 : resolvedPropsOnKeyDown(ev);\n            return;\n        }\n        // if we're not allowing space to type, continue with default behavior\n        defaultOnTriggerKeyDown === null || defaultOnTriggerKeyDown === void 0 ? void 0 : defaultOnTriggerKeyDown(ev);\n    });\n    /* handle open/close + focus change when clicking expandIcon */ const { onMouseDown: onIconMouseDown, onClick: onIconClick } = state.expandIcon || {};\n    const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, ()=>{\n        // do not dismiss on blur when closing via clicking the icon\n        if (open) {\n            baseState.ignoreNextBlur.current = true;\n        }\n    }));\n    const onExpandIconClick = useEventCallback(mergeCallbacks(onIconClick, (event)=>{\n        var _triggerRef_current;\n        // open and set focus\n        state.setOpen(event, !state.open);\n        (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n        // set focus visible=false, since this can only be done with the mouse/pointer\n        setFocusVisible(false);\n    }));\n    if (state.expandIcon) {\n        state.expandIcon.onMouseDown = onExpandIconMouseDown;\n        state.expandIcon.onClick = onExpandIconClick;\n        // If there is no explicit aria-label, calculate default accName attribute for expandIcon button,\n        // using the following steps:\n        // 1. If there is an aria-label, it is \"Open [aria-label]\"\n        // 2. If there is an aria-labelledby, it is \"Open [aria-labelledby target]\" (using aria-labelledby + ids)\n        // 3. If there is no aria-label/ledby attr, it falls back to \"Open\"\n        // We can't fall back to a label/htmlFor name because of https://github.com/w3c/accname/issues/179\n        const hasExpandLabel = state.expandIcon['aria-label'] || state.expandIcon['aria-labelledby'];\n        const defaultOpenString = 'Open'; // this is english-only since it is the fallback\n        if (!hasExpandLabel) {\n            if (props['aria-labelledby']) {\n                var _state_expandIcon_id;\n                const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;\n                const chevronLabelledBy = `${chevronId} ${state.input['aria-labelledby']}`;\n                state.expandIcon['aria-label'] = defaultOpenString;\n                state.expandIcon.id = chevronId;\n                state.expandIcon['aria-labelledby'] = chevronLabelledBy;\n            } else if (props['aria-label']) {\n                state.expandIcon['aria-label'] = `${defaultOpenString} ${props['aria-label']}`;\n            } else {\n                state.expandIcon['aria-label'] = defaultOpenString;\n            }\n        }\n    }\n    return state;\n};\n"],"names":["useCombobox_unstable","props","ref","_props_input","useFieldControlProps_unstable","supportsLabelFor","supportsRequired","supportsSize","baseState","useComboboxBaseState","editable","activeOption","clearSelection","getIndexOfId","getOptionsMatchingText","hasFocus","open","selectOption","selectedOptions","setActiveOption","setFocusVisible","setOpen","setValue","value","disabled","freeform","inlinePopup","multiselect","comboId","useId","primary","triggerNativeProps","root","rootNativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","rootRef","React","useRef","triggerRef","hideActiveDescendant","setHideActiveDescendant","useState","isTyping","popupDimensions","setPopupDimensions","useEffect","_rootRef_current","width","current","clientWidth","getOptionFromInput","inputValue","searchString","trim","toLowerCase","length","matcher","optionText","indexOf","matches","startIndex","id","nextMatch","find","option","_matches_","undefined","ev","onTriggerBlur","text","newState","onTriggerChange","target","matchingOption","triggerSlot","listboxSlot","slot","always","input","defaultProps","useMergedRefs","type","elementType","resolvedPropsOnKeyDown","onKeyDown","onChange","mergeCallbacks","onBlur","optional","listbox","renderByDefault","children","style","Listbox","useComboboxPopup","useTriggerListboxSlots","state","components","expandIcon","createElement","ChevronDownIcon","role","defaultOnTriggerKeyDown","useEventCallback","getDropdownActionFromKey","key","ArrowLeft","ArrowRight","action","onMouseDown","onIconMouseDown","onClick","onIconClick","onExpandIconMouseDown","ignoreNextBlur","onExpandIconClick","event","_triggerRef_current","focus","hasExpandLabel","defaultOpenString","_state_expandIcon_id","chevronId","chevronLabelledBy"],"mappings":"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"}