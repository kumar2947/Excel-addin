import * as React from 'react';
import { getIntrinsicElementProps, isResolvedShorthand, useMergedRefs, slot } from '@fluentui/react-utilities';
import { useTreeItemContext_unstable, useTreeContext_unstable } from '../../contexts';
import { Checkbox } from '@fluentui/react-checkbox';
import { Radio } from '@fluentui/react-radio';
import { TreeItemChevron } from '../TreeItemChevron';
import { useArrowNavigationGroup } from '@fluentui/react-tabster';
/**
 * Create the state required to render TreeItemLayout.
 *
 * The returned state can be modified with hooks such as useTreeItemLayoutStyles_unstable,
 * before being passed to renderTreeItemLayout_unstable.
 *
 * @param props - props from this instance of TreeItemLayout
 * @param ref - reference to root HTMLElement of TreeItemLayout
 */ export const useTreeItemLayout_unstable = (props, ref)=>{
    const { main, iconAfter, iconBefore } = props;
    const layoutRef = useTreeItemContext_unstable((ctx)=>ctx.layoutRef);
    const selectionMode = useTreeContext_unstable((ctx)=>ctx.selectionMode);
    const [isActionsVisibleExternal, actionsShorthand] = isResolvedShorthand(props.actions) ? [
        props.actions.visible,
        {
            ...props.actions,
            visible: undefined
        }
    ] : [
        undefined,
        props.actions
    ];
    const isActionsVisible = useTreeItemContext_unstable((ctx)=>ctx.isActionsVisible) || isActionsVisibleExternal;
    const isAsideVisible = useTreeItemContext_unstable((ctx)=>ctx.isAsideVisible);
    const selectionRef = useTreeItemContext_unstable((ctx)=>ctx.selectionRef);
    const expandIconRef = useTreeItemContext_unstable((ctx)=>ctx.expandIconRef);
    const actionsRef = useTreeItemContext_unstable((ctx)=>ctx.actionsRef);
    const checked = useTreeItemContext_unstable((ctx)=>ctx.checked);
    const isBranch = useTreeItemContext_unstable((ctx)=>ctx.itemType === 'branch');
    const expandIcon = slot.optional(props.expandIcon, {
        renderByDefault: isBranch,
        defaultProps: {
            children: /*#__PURE__*/ React.createElement(TreeItemChevron, null),
            'aria-hidden': true
        },
        elementType: 'div'
    });
    const expandIconRefs = useMergedRefs(expandIcon === null || expandIcon === void 0 ? void 0 : expandIcon.ref, expandIconRef);
    if (expandIcon) {
        expandIcon.ref = expandIconRefs;
    }
    const arrowNavigationProps = useArrowNavigationGroup({
        circular: true,
        axis: 'horizontal'
    });
    const actions = isActionsVisible ? slot.optional(actionsShorthand, {
        defaultProps: {
            ...arrowNavigationProps,
            role: 'toolbar'
        },
        elementType: 'div'
    }) : undefined;
    const actionsRefs = useMergedRefs(actions === null || actions === void 0 ? void 0 : actions.ref, actionsRef);
    if (actions) {
        actions.ref = actionsRefs;
    }
    return {
        components: {
            root: 'div',
            expandIcon: 'div',
            iconBefore: 'div',
            main: 'div',
            iconAfter: 'div',
            actions: 'div',
            aside: 'div',
            // Casting here to a union between checkbox and radio
            selector: selectionMode === 'multiselect' ? Checkbox : Radio
        },
        buttonContextValue: {
            size: 'small'
        },
        root: slot.always(getIntrinsicElementProps('div', {
            ...props,
            // FIXME:
            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`
            // but since it would be a breaking change to fix it, we are casting ref to it's proper type
            ref: useMergedRefs(ref, layoutRef)
        }), {
            elementType: 'div'
        }),
        iconBefore: slot.optional(iconBefore, {
            defaultProps: {
                'aria-hidden': true
            },
            elementType: 'div'
        }),
        main: slot.always(main, {
            elementType: 'div'
        }),
        iconAfter: slot.optional(iconAfter, {
            defaultProps: {
                'aria-hidden': true
            },
            elementType: 'div'
        }),
        aside: isAsideVisible ? slot.optional(props.aside, {
            defaultProps: {
                'aria-hidden': true
            },
            elementType: 'div'
        }) : undefined,
        actions,
        expandIcon,
        selector: slot.optional(props.selector, {
            renderByDefault: selectionMode !== 'none',
            defaultProps: {
                checked,
                tabIndex: -1,
                'aria-hidden': true,
                ref: selectionRef
            },
            elementType: selectionMode === 'multiselect' ? Checkbox : Radio
        })
    };
};
